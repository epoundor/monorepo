"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanup = cleanup;
exports.render = render;

var _testUtils = require("@vue/test-utils");

var _dom = require("@testing-library/dom");

var _excluded = ["store", "routes", "container", "baseElement"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var mountedWrappers = new Set();

function render(Component) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      {
    store = null,
    routes = null,
    container: customContainer,
    baseElement: customBaseElement
  } = _ref,
      mountOptions = _objectWithoutProperties(_ref, _excluded);

  var div = document.createElement('div');
  var baseElement = customBaseElement || customContainer || document.body;
  var container = customContainer || baseElement.appendChild(div);

  if (store || routes) {
    console.warn("Providing 'store' or 'routes' options is no longer available.\nYou need to create a router/vuex instance and provide it through 'global.plugins'.\nCheck out the test examples on GitHub for further details.");
  }

  var wrapper = (0, _testUtils.mount)(Component, _objectSpread(_objectSpread({}, mountOptions), {}, {
    attachTo: container
  })); // this removes the additional wrapping div node from VTU:
  // https://github.com/vuejs/vue-test-utils-next/blob/master/src/mount.ts#L309

  unwrapNode(wrapper.parentElement);
  mountedWrappers.add(wrapper);
  return _objectSpread({
    container,
    baseElement,
    debug: function debug() {
      var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : baseElement;
      var maxLength = arguments.length > 1 ? arguments[1] : undefined;
      var options = arguments.length > 2 ? arguments[2] : undefined;
      return Array.isArray(el) ? el.forEach(e => console.log((0, _dom.prettyDOM)(e, maxLength, options))) : console.log((0, _dom.prettyDOM)(el, maxLength, options));
    },
    unmount: () => wrapper.unmount(),
    html: () => wrapper.html(),
    emitted: name => wrapper.emitted(name),
    rerender: props => wrapper.setProps(props)
  }, (0, _dom.getQueriesForElement)(baseElement));
}

function unwrapNode(node) {
  node.replaceWith(...node.childNodes);
}

function cleanup() {
  mountedWrappers.forEach(cleanupAtWrapper);
}

function cleanupAtWrapper(wrapper) {
  if (wrapper.element.parentNode && wrapper.element.parentNode.parentNode === document.body) {
    document.body.removeChild(wrapper.element.parentNode);
  }

  wrapper.unmount();
  mountedWrappers.delete(wrapper);
}